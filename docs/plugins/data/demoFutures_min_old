/*
基于 ATR （平均真实范围）和 RSI（相对强弱指数）结合的技术分析指标实现期货 CTA 策略。基于分钟频率数据，实现以下的 CTA 策略逻辑：
	计算1分钟内标的的最高价、最低价与前收盘价的差值的绝对值 TR 指标，然后求得 TR 指标平均值，即 ATR。
	用过去10分钟的收盘价数据计算 RSI 指标。

开仓：
	当 RSI 值大于70且ATR大于其10分钟均值时，买入开仓。
	当 RSI 值小于30且ATR大于其10分钟均值时，卖出开仓。
止损：
	持有多仓时，K线达到最高点后，回落0.004时，卖平
	持有空仓时，K线达到最地点后，反弹0.004时，买平
 */
//更改：订阅指标由indicator传入
//添加：msg为表的部分

login("admin","123456")
try{loadPlugin("MatchingEngineSimulator")}catch(ex){print ex}
try{loadPlugin("Backtest")}catch(ex){print ex}

@state
def atr(high, low, close, m=14,n=10) {
	prevClosePrice=prev(close)
	tr = rowMax([high-low,abs(high-prevClosePrice),abs(low-prevClosePrice)])
	atr=ema(tr, m)
	mAtr=mavg(atr,n)
	return atr,mAtr
}

@state
def rsi(close, timePeriod=14) {
	 deltaClose = deltas(close)
	 up = iif(nullCompare(>, deltaClose, 0), deltaClose, 0)
	 down = iif(nullCompare(>, deltaClose, 0), 0, -deltaClose)
	 upAvg = ema(up, timePeriod)
	 downAvg = ema(down, timePeriod)
	 return 100.0 * upAvg / (upAvg + downAvg)
}

def initialize(mutable contextDict){
	d=dict(STRING,ANY)
	d["ATR"]=<atr(signal[0], signal[1], signal[2], 14,10)[0]>
	d["mATR"]=<atr(signal[0], signal[1], signal[2], 14,10)[1]>
	d["RSI"]=<rsi(signal[2], 14)>
	Backtest::subscribeIndicator(contextDict["engine"], "kline", d)   //订阅指标，通过indicator参数传入
	//RSI买入信号指标
	contextDict["buySignalRSI"]=70.
	//RSI卖出信号指标
	contextDict["sellSignalRSI"]=30.
	///平仓线
	contextDict["closeLine"]=0.004
	//
	contextDict["lowPrice"]=dict(STRING,ANY)
	contextDict["highPrice"]=dict(STRING,ANY)
	//
}

def beforeTrading(mutable contextDict){
	print ("beforeTrading: "+contextDict["tradeDate"])
}

//msg为字典：
def onBar_dictionary(mutable contextDict, msg, indicator){
	//行情回测，编写策略逻辑
	for(istock in msg.keys()){
		longPos=Backtest::getPosition(contextDict["engine"],istock).longPosition[0]
		shortPos=Backtest::getPosition(contextDict["engine"],istock).shortPosition[0]
		price=msg[istock]["close"]
		//没有多头持仓，并且多头趋势时，买入
		if(longPos<1 and shortPos<1 and indicator[istock]["ATR"]>indicator[istock]["mATR"] and indicator[istock]["RSI"]>contextDict["buySignalRSI"] and 
		indicator[istock]["mATR"]>0){
			Backtest::submitOrder(contextDict["engine"], (istock,msg[istock]["symbolSource"],contextDict["tradeTime"],5, price+0.02, 0., 2, 1, 0),"buyOpen")
		        	contextDict["highPrice"][istock]=price
		        	continue
		}
		//没有空头持仓，并且空头趋势时，卖出
		if(longPos<1 and shortPos<1 and indicator[istock]["ATR"]>indicator[istock]["mATR"] and indicator[istock]["RSI"]<contextDict["sellSignalRSI"] and 
		indicator[istock]["mATR"]>0){
			Backtest::submitOrder(contextDict["engine"], (istock,msg[istock]["symbolSource"],contextDict["tradeTime"],5,price-0.02, 0., 2, 2, 0),"sellOpen")
		        	contextDict["lowPrice"][istock]=price
		        	continue
		}
		if(longPos>0 and price>contextDict["highPrice"][istock]){//更新最高价
		        	contextDict["highPrice"][istock]=max(price,contextDict["highPrice"][istock])
		}
		else if(longPos>0  and price<=contextDict["highPrice"][istock]*(1-contextDict["closeLine"])){//平仓
			Backtest::submitOrder(contextDict["engine"], (istock,msg[istock]["symbolSource"],contextDict["tradeTime"],5,price-0.02, 0., 2, 3, 0),"sellClose")
		}
		if(shortPos>0 and price<contextDict["lowPrice"][istock]){//更新最低价
		        	contextDict["lowPrice"][istock]=max(price,contextDict["lowPrice"][istock])
		}
		else if(shortPos>0  and price>=contextDict["lowPrice"][istock]*(1+contextDict["closeLine"])){//平仓
			Backtest::submitOrder(contextDict["engine"], (istock,msg[istock]["symbolSource"],contextDict["tradeTime"],5,price+0.02, 0., 2, 4, 0),"buyClose")
		}		
	}
}

////msg为表：
def onBar_table(mutable contextDict, msg, indicator){
	//行情回测，编写策略逻辑
	for(row in 1..msg.size()-1){
		//istock = msg[row]["symbol"]
		istock = msg.symbol[row]
		price=msg.close[row]
		longPos=Backtest::getPosition(contextDict["engine"],istock).longPosition[0]
		shortPos=Backtest::getPosition(contextDict["engine"],istock).shortPosition[0]
		//没有多头持仓，并且多头趋势时，买入
		if(longPos<1 and shortPos<1 and indicator.ATR[row]>indicator.mATR[row] and indicator.RSI[row]>contextDict["buySignalRSI"] and 
		indicator.mATR[row]>0){
			Backtest::submitOrder(contextDict["engine"], (istock,msg.symbolSource[row],contextDict["tradeTime"],5, price+0.02, 0., 2, 1, 0),"buyOpen")
		        	contextDict["highPrice"][istock]=price
		        	continue
		}
		//没有空头持仓，并且空头趋势时，卖出
		if(longPos<1 and shortPos<1 and indicator.ATR[row]>indicator.mATR[row] and indicator.RSI[row]<contextDict["sellSignalRSI"] and 
		indicator.mATR[row]>0){
			Backtest::submitOrder(contextDict["engine"], (istock,msg.symbolSource[row],contextDict["tradeTime"],5,price-0.02, 0., 2, 2, 0),"sellOpen")
		        	contextDict["lowPrice"][istock]=price
		        	continue
		}
		if(longPos>0 and price>contextDict["highPrice"][istock]){//更新最高价
		        	contextDict["highPrice"][istock]=max(price,contextDict["highPrice"][istock])
		}
		else if(longPos>0  and price<=contextDict["highPrice"][istock]*(1-contextDict["closeLine"])){//平仓
			Backtest::submitOrder(contextDict["engine"], (istock,msg.symbolSource[row],contextDict["tradeTime"],5,price-0.02, 0., 2, 3, 0),"sellClose")
		}
		if(shortPos>0 and price<contextDict["lowPrice"][istock]){//更新最低价
		        	contextDict["lowPrice"][istock]=max(price,contextDict["lowPrice"][istock])
		}
		else if(shortPos>0  and price>=contextDict["lowPrice"][istock]*(1+contextDict["closeLine"])){//平仓
			Backtest::submitOrder(contextDict["engine"], (istock,msg.symbolSource[row],contextDict["tradeTime"],5,price+0.02, 0., 2, 4, 0),"buyClose")
		}				
	}
}

def onSnapshot(mutable contextDict, msg, indicator){
}

def onOrder( mutable contextDict,orders){
}
def onTrade(mutable contextDict,trades){
}
def afterTrading(mutable contextDict){	
	print("afterTrading")	
	print( contextDict["tradeTime"].date())
}
def finalized (mutable contextDict){
}
go

// ===================================================================================
// step 2：策略配置与引擎创建
//msg为字典时的userConfig参数配置
userConfig_dictionary=dict(STRING,ANY) 
userConfig_dictionary["startDate"]= 2023.02.01        
userConfig_dictionary["endDate"]= 2023.02.28       
userConfig_dictionary["strategyGroup"]= "futures"
userConfig_dictionary["cash"]= 10000000
userConfig_dictionary["commission"]= 0.0005	 //手续费为万五
userConfig_dictionary["tax"]=0.001		     	 //一般税为千一
userConfig_dictionary["dataType"]=3	         //行情为分钟频率
userConfig_dictionary["msgAsTable"]= false      //msg为字典
userConfig_dictionary["frequency"]= 0
userConfig_dictionary["outputOrderInfo"]= true
userConfig_dictionary["depth"]= 5

//msg为表时的userConfig参数配置
userConfig_table=dict(STRING,ANY) 
userConfig_table["startDate"]= 2023.02.01        
userConfig_table["endDate"]= 2023.02.28       
userConfig_table["strategyGroup"]= "futures"
userConfig_table["cash"]= 10000000
userConfig_table["commission"]= 0.0005
userConfig_table["tax"]= 0.001
userConfig_table["dataType"]=3		             //行情为分钟频率
userConfig_table["msgAsTable"]= true             //msg为表
userConfig_table["frequency"]= 0
userConfig_table["outputOrderInfo"]= true
//userConfig_table["depth"]= 5

// -------------------------
t=loadText("/root/Test_whiteBook/futureTestData.csv") //根据需要修改
distinct(t.ContractID)
tb=select ContractID as symbol,Market as symbolSource,concatDateTime(Date,BarTime) as tradeTime,TradeDate as tradingDay,OpenPrice as open,
LowPrice as low,HighPrice as high, ClosePrice as close,long(volume) as volume,Value*1.0 as amount,ULimitPrice as upLimitPrice,
LLimitPrice as downLimitPrice,fixedLengthArrayVector([backwardFactorHighPrice,backwardFactorLowPrice,backwardFactorClosePrice]) as signal,
PreClosePrice as prevClosePrice,SetPrice as settlementPrice, PreSetPrice as prevSettlementPrice from t order by tradeTime
schema(tb).colDefs
//where ContractID in [`A2305] 
symbol=distinct(t.ContractID)
basicInfo = table(symbol as symbol, take(100.,size(symbol)) as multiplier, take(0.2,size(symbol)) as marginRatio,
				take(0.01,size(symbol)) as tradeUnit, take(0.02,size(symbol)) as priceUnit, 
				take(0.03,size(symbol)) as priceTick, take(1.5,size(symbol)) as commission, take(1,size(symbol)) as deliveryCommissionMode)
//执行回测				
try{Backtest::dropBacktestEngine("Backtest_test1")}catch(ex){print ex}
engine1= Backtest::createBacktestEngine(`Backtest_test1, userConfig_dictionary,basicInfo, initialize, beforeTrading,onBar_dictionary,,onOrder,onTrade,afterTrading,finalized);
try{Backtest::dropBacktestEngine("Backtest_test2")}catch(ex){print ex}
engine2= Backtest::createBacktestEngine(`Backtest_test2, userConfig_table,basicInfo, initialize, beforeTrading,onBar_table,,onOrder,onTrade,afterTrading,finalized);

distinct(tb.tradingDay)
// ===================================================================================

//主数据插入开始回测
timer Backtest::appendQuotationMsg(engine1, tb) //字典结构
timer Backtest::appendQuotationMsg(engine2, tb) //表结构

///回测结束标志：插入一条'END'数据
a = select * from tb where tradeTime=max(tradeTime) limit 1
update a set symbol = "END"
Backtest::appendQuotationMsg(engine1, a) // 字典结构
Backtest::appendQuotationMsg(engine2, a) // 表结构
go

// ===================================================================================
//msg为字典时的回测结果
res1=select * from Backtest::getTradeDetails(engine1) where orderStatus in [0,1]
availCash1=Backtest::getAvailableCash(engine1)  //可用资金
dailyPos1 = Backtest::getDailyPosition(engine1)	 //每日盘后持仓
dailyTotalPortfolios1 = Backtest::getDailyTotalPortfolios(engine1)  //获取策略每日权益指标表
totalPortfolios1 = Backtest::getTotalPortfolios(engine1)  //可在结束时调用，也可以回测时实时调用，获取策略权益指标表
t1=Backtest::getReturnSummary(engine1) //回测综合结果
tradeDetails1=Backtest::getTradeDetails(engine1) //交易明细

////msg为表时的回测结果
res2=select * from Backtest::getTradeDetails(engine2) where orderStatus in [0,1]
availCash2 = Backtest::getAvailableCash(engine2)
dailyPos2 = Backtest::getDailyPosition(engine2)
dailyTotalPortfolios2 = Backtest::getDailyTotalPortfolios(engine2)
totalPortfolios2 = Backtest::getTotalPortfolios(engine2)
t2=Backtest::getReturnSummary(engine2)
tradeDetails2=Backtest::getTradeDetails(engine2)

/*
基于 ATR （平均真实范围）和 RSI（相对强弱指数）结合的技术分析指标实现期货 CTA 策略。基于分钟频率数据，实现以下的 CTA 策略逻辑：
	计算1分钟内标的的最高价、最低价与前收盘价的差值的绝对值 TR 指标，然后求得 TR 指标平均值，即 ATR。
	用过去10分钟的收盘价数据计算 RSI 指标。

开仓：
	当 RSI 值大于70且ATR大于其10分钟均值时，买入开仓。
	当 RSI 值小于30且ATR大于其10分钟均值时，卖出开仓。
止损：
	持有多仓时，K线达到最高点后，回落0.004时，卖平
	持有空仓时，K线达到最地点后，反弹0.004时，买平
 */
//更改：订阅指标由indicator传入
//添加：msg为表的部分

// 加载引擎
login("admin","123456")
try{loadPlugin("MatchingEngineSimulator")}catch(ex){print ex}
try{loadPlugin("Backtest")}catch(ex){print ex}
go

// 定义策略回调函数
@state
def atr(high, low, close, m = 14, n = 10){
	prevClosePrice = prev(close)
	tr = rowMax([high - low, abs(high - prevClosePrice), abs(low - prevClosePrice)])
	atr = ema(tr, m)
	mAtr = mavg(atr, n)
	return atr, mAtr
}
@state
def rsi(close, timePeriod=14) {
	 deltaClose = deltas(close)
	 up = iif(nullCompare(>, deltaClose, 0), deltaClose, 0)
	 down = iif(nullCompare(>, deltaClose, 0), 0, -deltaClose)
	 upAvg = ema(up, timePeriod)
	 downAvg = ema(down, timePeriod)
	 return 100.0 * upAvg / (upAvg + downAvg)
}
def initialize(mutable context){
	d = dict(STRING,ANY)
	d["ATR"] = <atr(signal[0], signal[1], signal[2])[0]>
	d["mATR"] = <atr(signal[0], signal[1], signal[2])[1]>
	d["RSI"] = <rsi(signal[2], 14)>
	Backtest::subscribeIndicator(context["engine"], "kline", d)
}
def beforeTrading(mutable context){
	// print ("beforeTrading: "+context["tradeDate"])
}
def onBar(mutable context, msg, indicator){
	//行情回测，编写策略逻辑
	for(istock in msg.keys()){
		longPos = Backtest::getPosition(context["engine"],istock).longPosition[0]
		shortPos = Backtest::getPosition(context["engine"],istock).shortPosition[0]
		price = msg[istock]["close"]
		//没有多头持仓，并且多头趋势时，买入
		if(longPos < 1 and shortPos < 1 and indicator[istock]["ATR"] > indicator[istock]["mATR"] and indicator[istock]["RSI"] > context["buySignalRSI"] and 
		indicator[istock]["mATR"] > 0){
			Backtest::submitOrder(context["engine"], (istock,msg[istock]["symbolSource"], context["tradeTime"], 5, price+0.02, 0., 2, 1, 0), "buyOpen")
				context["highPrice"][istock] = price
				continue
		}
		//没有空头持仓，并且空头趋势时，卖出
		if(longPos < 1 and shortPos < 1 and indicator[istock]["ATR"] > indicator[istock]["mATR"] and indicator[istock]["RSI"] < context["sellSignalRSI"] and 
		indicator[istock]["mATR"] > 0){
			Backtest::submitOrder(context["engine"], (istock, msg[istock]["symbolSource"], context["tradeTime"], 5, price - 0.02, 0., 2, 2, 0), "sellOpen")
				context["lowPrice"][istock] = price
				continue
		}
		if(longPos > 0 and price > context["highPrice"][istock]){//更新最高价
		        	context["highPrice"][istock] = max(price,context["highPrice"][istock])
		}
		else if(longPos > 0 and price <= context["highPrice"][istock] * (1 - context["closeLine"])){//平仓
			Backtest::submitOrder(context["engine"], (istock, msg[istock]["symbolSource"], context["tradeTime"], 5, price - 0.02, 0., 2, 3, 0), "sellClose")
		}
		if(shortPos > 0 and price < context["lowPrice"][istock]){//更新最低价
		        	context["lowPrice"][istock] = max(price, context["lowPrice"][istock])
		}
		else if(shortPos > 0 and price >= context["lowPrice"][istock] * (1 + context["closeLine"])){//平仓
			Backtest::submitOrder(context["engine"], (istock,msg[istock]["symbolSource"], context["tradeTime"], 5, price + 0.02, 0., 2, 4, 0), "buyClose")
		}		
	}
}
def onSnapshot(mutable context, msg, indicator){
}
def onOrder( mutable context,orders){
}
def onTrade(mutable context,trades){
}
def afterTrading(mutable context){	
	// print("afterTrading")	
	// print( context["tradeTime"].date())
}
def finalize (mutable context){
}
go

// ===================================================================================
// 策略配置
userConfig=dict(STRING,ANY) 
userConfig["startDate"] = 2023.02.01        
userConfig["endDate"] = 2023.02.28       
userConfig["strategyGroup"] = "futures"
userConfig["cash"] = 10000000
userConfig["commission"] = 0.0005	 //手续费为万五
userConfig["tax"] = 0.001		     //一般税为千一
userConfig["dataType"] = 3	         //行情为分钟频率
userConfig["msgAsTable"] = false     //msg为字典
userConfig["frequency"] = 0
userConfig["outputOrderInfo"] = true
userConfig["depth"] = 5
userConfig["enableIndicatorOptimize"]=true

// 回调函数配置
callbacks=dict(STRING,ANY)
callbacks["initialize"] = initialize
callbacks["beforeTrading"] = beforeTrading
callbacks["onBar"] = onBar
callbacks["onOrder"] = onOrder
callbacks["onTrade"] = onTrade
callbacks["afterTrading"] = afterTrading
callbacks["finalize"] = finalize

// context配置
context = dict(STRING,ANY)
//RSI买入信号指标
context["buySignalRSI"]=70.
//RSI卖出信号指标
context["sellSignalRSI"]=30.
///平仓线
context["closeLine"]=0.004
context["lowPrice"]=dict(STRING,ANY)
context["highPrice"]=dict(STRING,ANY)
userConfig["context"] = context

// 数据导入
t = loadText("/root/Data/futureTestData.csv")
distinct(t.ContractID)

tb = select ContractID as symbol, Market as symbolSource, concatDateTime(Date,BarTime) as tradeTime, TradeDate as tradingDay, OpenPrice as open,
LowPrice as low, HighPrice as high, ClosePrice as close, long(volume) as volume, Value*1.0 as amount, ULimitPrice as upLimitPrice,
LLimitPrice as downLimitPrice, fixedLengthArrayVector([backwardFactorHighPrice,backwardFactorLowPrice,backwardFactorClosePrice]) as signal,
PreClosePrice as prevClosePrice, SetPrice as settlementPrice, PreSetPrice as prevSettlementPrice from t where ContractID in ['AG2306'] order by tradeTime
tb.append!(tb)
// 共20000条数据，一个月

symbol = distinct(t.ContractID)
basicInfo = table(symbol as symbol, take(100.,size(symbol)) as multiplier, take(0.2,size(symbol)) as marginRatio,
				take(0.01, size(symbol)) as tradeUnit, take(0.02, size(symbol)) as priceUnit, 
				take(0.03, size(symbol)) as priceTick, take(1.5, size(symbol)) as commission, take(1, size(symbol)) as deliveryCommissionMode)
// 执行回测				
try{Backtest::dropBacktestEngine("Backtest_test1")}catch(ex){print ex}
try{Backtest::dropBacktestEngine("Backtest_test2")}catch(ex){print ex}
// engine1= Backtest::createBacktestEngine(`Backtest_test1, userConfig_dictionary,basicInfo, initialize, beforeTrading,onBar_dictionary,,onOrder,onTrade,afterTrading,finalized);
engine1 = Backtest::createBacktester("Backtest_test1", userConfig, callbacks, false, basicInfo)
engine2 = Backtest::createBacktester("Backtest_test2", userConfig, callbacks, true, basicInfo)
go

// 插入行情数据
print("\nnotJIT\ntime:")
timer Backtest::appendQuotationMsg(engine1, tb)
print("JIT\ntime:")
timer Backtest::appendQuotationMsg(engine2, tb)

// 回测结束标志：插入一条'END'数据
a = select * from tb where tradeTime=max(tradeTime) limit 1
update a set symbol = "END"
Backtest::appendQuotationMsg(engine1, a)
Backtest::appendQuotationMsg(engine2, a)
go

// ===================================================================================
// 结果展示
res1=select * from Backtest::getTradeDetails(engine1) where orderStatus in [0,1]
availCash1=Backtest::getAvailableCash(engine1)  //可用资金
dailyPos1 = Backtest::getDailyPosition(engine1)	 //每日盘后持仓
dailyTotalPortfolios1 = Backtest::getDailyTotalPortfolios(engine1)  //获取策略每日权益指标表
totalPortfolios1 = Backtest::getTotalPortfolios(engine1)  //可在结束时调用，也可以回测时实时调用，获取策略权益指标表
t1=Backtest::getReturnSummary(engine1)
tradeDetails1=Backtest::getTradeDetails(engine1) //交易明细
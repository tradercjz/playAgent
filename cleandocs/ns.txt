

### ns

#### 语法

```DolphinDB
ns(maturity, yield, [method='nm'], [maxIter], [bounds], [initialGuess], [seed])
```

#### 描述

使用 NS 模型和指定的优化方法，拟合债券的收益率曲线。返回一个字典，详见 [nss](nss.html)。

#### 参数

- **initialGuess**: 可选参数，数值向量。表示使函数最优化的参数的初始猜测，长度为 4，分别对应 β0, β1, β2, λ 的初始值，默认值为 [0.01, 0.01, 0.01, 1.0]。

#### 参数
| 参数          | 类型         | 说明                                                                 |
|---------------|--------------|----------------------------------------------------------------------|
| maturity      | 数值型向量   | 历史债券到期时间（单位：年），值≥0                                   |
| yield         | 数值型向量   | 历史债券收益率，长度与 maturity 一致                                |
| method        | 字符串       | 优化算法（默认"nm"），可选值："nm"/"bfgs"/"lbfgs"/"slsqp"/"de"       |
| maxIter       | 整型标量/向量| 最大迭代次数                                                         |
| bounds        | 数值矩阵     | 参数边界矩阵（N×2），仅对"lbfgs"/"slsqp"/"de"有效                    |
| initialGuess  | 数值向量     | 参数初始猜测值（默认[0.01,0.01,0.01,0.01,1.0,1.0]）                 |
| seed          | 整型标量     | 随机数种子（仅 method='de' 时有效）                                  |

#### 返回值
字典包含以下键值：
- `modelName`：模型名称（"nss"）
- `params`：拟合参数向量（6个参数）
- `fminResult`：优化结果字典（算法相关）
- `predict`：预测函数（`model.predict(T)`，T为到期时间）

#### 示例

```DolphinDB
// 使用 bfgs 优化方法
maturity = [1,2,3,4,5,8,10,15,20,25,30]
yield = [0.0039,0.0061,NULL,NULL,0.0166,NULL,0.0258,NULL,NULL,0.0332,NULL]
model = ns(maturity, yield, method='bfgs');
model;

/* 输出
modelName->ns
params->[0.037907009765789,-0.032345632006991,-0.048221596538028,1.48711064869407]
fminResult->xopt->[0.037907009765789,-0.032345632006991,-0.048221596538028,1.48711064869407]
fopt->7.682740281926149E-8
...
*/
```

```DolphinDB
// 使用 nm 优化方法
model = ns(maturity, yield, method='nm');
model;

/* 输出
modelName->ns
params->[-0.017297505365068,0.016544815374471,0.142682692134247,14.720778706012911]
fminResult->xopt->[-0.017297505365068,0.016544815374471,0.142682692134247,14.720778706012911]
fopt->0.000001443427918
...
*/
```

#### 相关函数
- [nss](nss.html)


### 函数说明

#### 语法
```DolphinDB
nss(maturity, yield, [method="nm"], [maxIter], [bounds], [initialGuess], [seed])
```

#### 详情
使用 NSS 模型和指定的优化方法拟合债券收益率曲线。

#### 参数
| 参数          | 类型         | 说明                                                                 |
|---------------|--------------|----------------------------------------------------------------------|
| maturity      | 数值型向量   | 历史债券到期时间（单位：年），值≥0                                   |
| yield         | 数值型向量   | 历史债券收益率，长度与 maturity 一致                                |
| method        | 字符串       | 优化算法（默认"nm"），可选值："nm"/"bfgs"/"lbfgs"/"slsqp"/"de"       |
| maxIter       | 整型标量/向量| 最大迭代次数                                                         |
| bounds        | 数值矩阵     | 参数边界矩阵（N×2），仅对"lbfgs"/"slsqp"/"de"有效                    |
| initialGuess  | 数值向量     | 参数初始猜测值（默认[0.01,0.01,0.01,0.01,1.0,1.0]）                 |
| seed          | 整型标量     | 随机数种子（仅 method='de' 时有效）                                  |

#### 返回值
字典包含以下键值：
- `modelName`：模型名称（"nss"）
- `params`：拟合参数向量（6个参数）
- `fminResult`：优化结果字典（算法相关）
- `predict`：预测函数（`model.predict(T)`，T为到期时间）

#### 示例
```DolphinDB
// 基本使用（BFGS算法）
maturity = [1,2,3,4,5,8,10,15,20,25,30]
yield = [0.0039,0.0061,NULL,NULL,0.0166,NULL,0.0258,NULL,NULL,0.0332,NULL]
model = nss(maturity, yield, method='bfgs');
model;

/* 输出
modelName->nss
params->[0.036140551464406,-0.017389058792285,-0.039552798745696,-0.039554933812457,1.001838685848857,1.000930288743548]
fopt->0.000003185056025
predict->nssPredict
*/

// Nelder-Mead算法示例
model = nss(maturity, yield, method='nm');
model;

/* 输出
params->[0.038184469794996,-0.048575389082029,-0.022287414169806,0.047523360012739,1.873046195772644,0.161159907274023]
fopt->5.456415848001168E-9
*/
```

相关函数：`nsspredict`